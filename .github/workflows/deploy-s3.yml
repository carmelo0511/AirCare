# This GitHub Actions workflow deploys the static website to AWS S3,
# invalidates the CloudFront cache, and updates the AWS Lambda backend
# automatically on every push to 'main'.

name: Deploy to S3, Invalidate CloudFront & Deploy Lambda

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      - name: Install backend dependencies
        run: |
          cd backend
          npm ci
      - name: Run backend tests
        run: |
          cd backend
          npm test --silent

      # ----- FRONTEND DEPLOY -----
      - name: Sync S3 bucket
        uses: jakejarvis/s3-sync-action@v0.5.1
        with:
          args: --delete
        env:
          AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: 'ca-central-1'
          SOURCE_DIR: './frontend'      # <-- adapt this if your frontend is not in './frontend'

      - name: Invalidate CloudFront cache
        uses: chetan/invalidate-cloudfront-action@v2
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: 'ca-central-1'
          DISTRIBUTION: ${{ secrets.CLOUDFRONT_DIST_ID }}
          PATHS: "/*"

      # ----- BACKEND (LAMBDA) DEPLOY -----
      - name: Install zip (for packaging Lambda)
        run: sudo apt-get update && sudo apt-get install -y zip

      - name: Package Lambda function
        run: |
          cd backend
          zip -r ../lambda.zip . -x "*.git*" "*.zip"
          cd ..
        # Include node_modules so Lambda has required dependencies

      # ----- TERRAFORM DEPLOY -----
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Terraform Init
        working-directory: ./terraform
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: 'ca-central-1'
          TF_VAR_openweather_api_key: ${{ secrets.OPENWEATHER_APIKEY }}
        run: terraform init -input=false

      - name: Import existing AWS resources
        working-directory: ./terraform
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: 'ca-central-1'
          BUCKET_NAME: ${{ secrets.AWS_S3_BUCKET }}
          LAMBDA_NAME: ${{ secrets.LAMBDA_FUNCTION_NAME }}
          TF_VAR_openweather_api_key: ${{ secrets.OPENWEATHER_APIKEY }}
        run: |
          terraform import aws_s3_bucket.frontend_bucket "$BUCKET_NAME" || true
          terraform import aws_iam_role.lambda_exec lambda_exec_role || true
          terraform import aws_dynamodb_table.history_table AirCareHistoryAQI || true
          terraform import aws_lambda_function.aircare_backend "$LAMBDA_NAME" || true

      - name: Terraform Apply
        working-directory: ./terraform
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: 'ca-central-1'
          TF_VAR_openweather_api_key: ${{ secrets.OPENWEATHER_APIKEY }}
        run: terraform apply -auto-approve

      - name: Deploy Lambda function
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: 'ca-central-1'
        run: |
          aws lambda update-function-code \
            --function-name ${{ secrets.LAMBDA_FUNCTION_NAME }} \
            --zip-file fileb://lambda.zip
        # Deploys the zipped Lambda code to AWS Lambda

