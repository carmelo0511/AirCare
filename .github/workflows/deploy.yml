name: Deploy AirCare Infrastructure & App

"on":
  push:
    branches:
      - main

jobs:
  deploy:
    name: Deploy AirCare Stack
    runs-on: ubuntu-latest

    steps:
      - name: üì¶ Checkout repository
        uses: actions/checkout@v4

      - name: üîí Verify required secrets
        run: |
          missing=false
          for var in AWS_S3_BUCKET AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY CLOUDFRONT_DIST_ID OPENWEATHER_APIKEY; do
            if [ -z "${!var}" ]; then
              echo "::error::$var secret not set"
              missing=true
            fi
          done
          if [ "$missing" = true ]; then
            exit 1
          fi
        env:
          AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          CLOUDFRONT_DIST_ID: ${{ secrets.CLOUDFRONT_DIST_ID }}
          OPENWEATHER_APIKEY: ${{ secrets.OPENWEATHER_APIKEY }}

      - name: ‚òÅÔ∏è Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ca-central-1

      - name: ‚öôÔ∏è Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: üìÅ Install backend dependencies
        run: |
          cd backend
          npm ci

      - name: üß™ Run backend tests
        run: |
          cd backend
          npm test --silent

      - name: üóëÔ∏è Remove dev dependencies
        run: |
          cd backend
          npm prune --omit=dev


      - name: üóÉÔ∏è Cache Terraform plugins
        uses: actions/cache@v4
        with:
          path: |
            ~/.terraform.d/plugin-cache
            .terraform
          key: ${{ runner.os }}-terraform-${{ hashFiles('**/*.tf') }}


      - name: üß∞ Install zip tool
        run: sudo apt-get update && sudo apt-get install -y zip

      - name: üì¶ Package Lambda
        run: |
          cd backend
          zip -r ../lambda.zip . -x "*.git*" "*.zip" "tests/*"
          cd ..

      - name: üîç Verify Lambda package
        run: |
          if [ ! -s lambda.zip ]; then
            echo "lambda.zip not found or empty" >&2
            exit 1
          fi
          ls -lh lambda.zip

      - name: üèóÔ∏è Set up Terraform
        uses: hashicorp/setup-terraform@v2

      - name: üßπ Terraform Format Check
        working-directory: ./terraform
        run: terraform fmt -check -recursive

      - name: üß± Terraform Init
        working-directory: ./terraform
        env:
          TF_VAR_openweather_api_key: ${{ secrets.OPENWEATHER_APIKEY }}
        run: terraform init -input=false

      - name: üîÑ Terraform Import existing infra
        working-directory: ./terraform
        env:
          TF_VAR_openweather_api_key: ${{ secrets.OPENWEATHER_APIKEY }}
          AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
        run: |
          # Remove existing resources from the state before re-importing to
          # avoid errors if they are already managed
          terraform state rm aws_s3_bucket.frontend_bucket || true
          terraform state rm aws_iam_role.lambda_exec || true
          terraform state rm aws_dynamodb_table.history_table || true
          terraform import aws_s3_bucket.frontend_bucket $AWS_S3_BUCKET
          terraform import aws_iam_role.lambda_exec lambda_exec_role
          terraform import aws_dynamodb_table.history_table AirCareHistoryAQI

      - name: ‚úÖ Terraform Validate
        working-directory: ./terraform
        run: terraform validate


      - name: üöÄ Terraform Apply
        working-directory: ./terraform
        env:
          TF_VAR_openweather_api_key: ${{ secrets.OPENWEATHER_APIKEY }}
        run: terraform apply -auto-approve

      - name: üì§ Lookup infrastructure details
        id: infra
        env:
          AWS_REGION: ca-central-1
        run: |
          api_id=$(aws apigateway get-rest-apis --query "items[?name=='AirCare API'].id" --output text)
          api="https://${api_id}.execute-api.ca-central-1.amazonaws.com/prod"
          echo "api=${api}" >> "$GITHUB_OUTPUT"
          table=$(grep dynamodb_table_name terraform/terraform.tfvars | awk '{print $3}' | tr -d '"')
          echo "table=${table}" >> "$GITHUB_OUTPUT"

      - name: üîß Generate frontend config
        env:
          API_BASE_URL: ${{ steps.infra.outputs.api }}
        run: node scripts/set-api-url.js

      - name: ‚òÅÔ∏è Sync S3 bucket (frontend)
        uses: jakejarvis/s3-sync-action@v0.5.1
        with:
          args: --delete
        env:
          AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
          SOURCE_DIR: './frontend'

      - name: üîÑ Invalidate CloudFront cache
        uses: chetan/invalidate-cloudfront-action@v2
        env:
          DISTRIBUTION: ${{ secrets.CLOUDFRONT_DIST_ID }}
          PATHS: "/*"
